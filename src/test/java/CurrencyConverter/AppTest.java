/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CurrencyConverter;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Scanner;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    static DatabaseManager DBM;



    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();

    private final PrintStream originalOut = System.out;

    private final InputStream originalIn = System.in;
    private final PrintStream originalErr = System.err;


    //to test if table is created
    @BeforeAll
    static void CreateDatabase() {
        DatabaseManager DBM = new DatabaseManager("jdbc:sqlite:src/test/resources/currencyConverter.db");
        AppTest.DBM = DBM;
        DBM.connectToDatabase();
    }

    @BeforeEach
    void CreateTables() {
        System.setOut(new PrintStream(outContent));

        System.setErr(new PrintStream(errContent));

        DBM.createCurrencyTable();
        DBM.createHistoryTable();
        DBM.createPopularCurrencyTable();
        DBM.insertDefaultCurrencyValues();
        DBM.initialiseHistoryTable();
        DBM.insertDefaultPopularCurrencies();

    }

    @AfterEach
    void DestroyDB() {
        System.setOut(originalOut);
        System.setErr(originalErr);
        DBM.dropTables();
    }


    @Test
    public void out() {
        outContent.reset();
        System.out.print("hello");
        assertEquals("hello", outContent.toString());
    }


     @Test
     void retrieveTableTest(){
        User user = new User(DBM);
        outContent.reset();
        try {
            user.getAllCurrencyRate();

            assertEquals( "Code_id  AUD  USD  EUR  CAD  HKD  SGD\n"+
                    "AUD ,  1 ,  0.68 ,  0.67 ,  0.89 ,  5.38 ,  0.98\n"+
                    "USD ,  1.46 ,  1 ,  0.98 ,  1.3 ,  7.85 ,  1.4\n"+
                    "EUR ,  1.48 ,  1.02 ,  1 ,  1.31 ,  7.97 ,  1.42\n"+
                    "CAD ,  1.12 ,  0.77 ,  0.76 ,  1 ,  6.01 ,  1.07\n"+
                    "HKD ,  0.19 ,  0.13 ,  0.13 ,  0.16 ,  1 ,  0.18\n"+
                    "SGD ,  1.04 ,  0.71 ,  0.7 ,  0.93 ,  5.60 ,  1\n"
                    , outContent.toString());

        } catch (SQLException ignored) {

        }

     }

     @Test
     void insertNewCurrencyTest(){
        User user = new User(DBM);
        

        //initializing arraylist for the lastInsert Function
        ArrayList<Float> rates = new ArrayList<>();
        rates.add(Float.parseFloat("1"));
        rates.add(Float.parseFloat("1"));
        rates.add(Float.parseFloat("1"));
        rates.add(Float.parseFloat("1"));
        rates.add(Float.parseFloat("1"));
        rates.add(Float.parseFloat("1"));
        try {

            //functions that insert new currency
            DBM.initializeNewCurrency("MYR");
            DBM.initializeRatesNewCurrency("MYR","AUD","1");
            DBM.initializeRatesNewCurrency("MYR","USD","1");
            DBM.initializeRatesNewCurrency("MYR","EUR","1");
            DBM.initializeRatesNewCurrency("MYR","CAD","1");
            DBM.initializeRatesNewCurrency("MYR","HKD","1");
            DBM.initializeRatesNewCurrency("MYR","SGD","1");
            DBM.lastInsert(rates,"MYR");

            outContent.reset();
            user.getAllCurrencyRate();

            //table with new currency
            assertEquals( "Code_id  AUD  USD  EUR  CAD  HKD  SGD  MYR\n"+
                    "AUD ,  1 ,  0.68 ,  0.67 ,  0.89 ,  5.38 ,  0.98 ,  1\n"+
                    "USD ,  1.46 ,  1 ,  0.98 ,  1.3 ,  7.85 ,  1.4 ,  1\n"+
                    "EUR ,  1.48 ,  1.02 ,  1 ,  1.31 ,  7.97 ,  1.42 ,  1\n"+
                    "CAD ,  1.12 ,  0.77 ,  0.76 ,  1 ,  6.01 ,  1.07 ,  1\n"+
                    "HKD ,  0.19 ,  0.13 ,  0.13 ,  0.16 ,  1 ,  0.18 ,  1\n"+
                    "SGD ,  1.04 ,  0.71 ,  0.7 ,  0.93 ,  5.60 ,  1 ,  1\n"+
                    "MYR ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1.0 ,  1\n"
                    , outContent.toString());
        } catch (SQLException ignored){

        }

     }

     @Test
     void retrieveRateTest(){

        assertEquals(DBM.retrieveRate("AUD","AUD"),1);
        assertEquals(Math.round(DBM.retrieveRate("EUR","CAD") * 100)/100.0, 1.31);
        assertEquals(Math.round(DBM.retrieveRate("SGD","USD") * 100)/100.0, 0.71);
        assertEquals(Math.round(DBM.retrieveRate("HKD","AUD") * 100)/100.0, 0.19);

        //"Code_id  AUD  USD  EUR  CAD  HKD  SGD\n"+
        // "AUD ,  1 ,  0.68 ,  0.67 ,  0.89 ,  5.38 ,  0.98
        // "USD ,  1.46 ,  1 ,  0.98 ,  1.3 ,  7.85 ,  1.4
        // "EUR ,  1.48 ,  1.02 ,  1 ,  1.31 ,  7.97 ,  1.42
        // "CAD ,  1.12 ,  0.77 ,  0.76 ,  1 ,  6.01 ,  1.07
        // "HKD ,  0.19 ,  0.13 ,  0.13 ,  0.16 ,  1 ,  0.18
        // "SGD ,  1.04 ,  0.71 ,  0.7 ,  0.93 ,  5.60 ,  1
        //
    }
    
     @Test
     void removeCurrencyTest(){
        User user = new User(DBM);
        try {

            // table before removing the currency
            outContent.reset();
            user.getAllCurrencyRate();
            assertEquals( "Code_id  AUD  USD  EUR  CAD  HKD  SGD\n"+
                    "AUD ,  1 ,  0.68 ,  0.67 ,  0.89 ,  5.38 ,  0.98\n"+
                    "USD ,  1.46 ,  1 ,  0.98 ,  1.3 ,  7.85 ,  1.4\n"+
                    "EUR ,  1.48 ,  1.02 ,  1 ,  1.31 ,  7.97 ,  1.42\n"+
                    "CAD ,  1.12 ,  0.77 ,  0.76 ,  1 ,  6.01 ,  1.07\n"+
                    "HKD ,  0.19 ,  0.13 ,  0.13 ,  0.16 ,  1 ,  0.18\n"+
                    "SGD ,  1.04 ,  0.71 ,  0.7 ,  0.93 ,  5.60 ,  1\n"
                    , outContent.toString());


            //functions that removes currency
            String arg = "hkd";
            DBM.removeCurrency(arg);
            outContent.reset();
            user.getAllCurrencyRate();

            //table with HKD removed
            assertEquals( "Code_id  AUD  USD  EUR  CAD  SGD\n"+
                    "AUD ,  1 ,  0.68 ,  0.67 ,  0.89 ,  0.98\n"+
                    "USD ,  1.46 ,  1 ,  0.98 ,  1.3 ,  1.4\n"+
                    "EUR ,  1.48 ,  1.02 ,  1 ,  1.31 ,  1.42\n"+
                    "CAD ,  1.12 ,  0.77 ,  0.76 ,  1 ,  1.07\n"+
                    "SGD ,  1.04 ,  0.71 ,  0.7 ,  0.93 ,  1\n"
                    , outContent.toString());

            // testing the getCurrencies method
            ArrayList<String> currencies = DBM.getCurrencies();
            assertEquals(currencies.get(0),"AUD");
            assertEquals(currencies.get(1),"USD");
            assertEquals(currencies.get(2),"EUR");
            assertEquals(currencies.get(3),"CAD");
            assertEquals(currencies.get(4),"SGD");

        } catch (SQLException ignored){

        }
     }

     @Test
     public void getCurrenciesTest(){
        //gets all currencies and returns in a list from the initialized currency table
        ArrayList<String> currencies = DBM.getCurrencies();
        assertEquals(currencies.get(0),"AUD");
        assertEquals(currencies.get(1),"USD");
        assertEquals(currencies.get(2),"EUR");
        assertEquals(currencies.get(3),"CAD");
        assertEquals(currencies.get(4),"HKD");
        assertEquals(currencies.get(5),"SGD");


                //"Code_id  AUD  USD  EUR  CAD  HKD  SGD\n"+
        // "AUD ,  1 ,  0.68 ,  0.67 ,  0.89 ,  5.38 ,  0.98
        // "USD ,  1.46 ,  1 ,  0.98 ,  1.3 ,  7.85 ,  1.4
        // "EUR ,  1.48 ,  1.02 ,  1 ,  1.31 ,  7.97 ,  1.42
        // "CAD ,  1.12 ,  0.77 ,  0.76 ,  1 ,  6.01 ,  1.07
        // "HKD ,  0.19 ,  0.13 ,  0.13 ,  0.16 ,  1 ,  0.18
        // "SGD ,  1.04 ,  0.71 ,  0.7 ,  0.93 ,  5.60 ,  1
        //

     }
     @Test
     public void getPopularCurrenciesTest(){
        //gets all currencies and returns in a list from the initialized currency table
        ArrayList<String> currencies = DBM.getPopularCurrencies();
        assertEquals(currencies.get(0),"AUD");
        assertEquals(currencies.get(1),"USD");
        assertEquals(currencies.get(2),"EUR");
        assertEquals(currencies.get(3),"HKD");


        //"Code_id
        // "AUD"
        // "USD"
        // "EUR"
        // "HKD"
        //

     }

     @Test
     public void updateCurrencyTest() {
        Admin ad = new Admin(DBM);

        ad.updateCurrency("AUD", "USD", "0.50");
        float updatedRate = DBM.retrieveRate("AUD", "USD");
        assertEquals(updatedRate, 0.5);

        float newInverseRate = DBM.retrieveRate("USD", "AUD");
        assertEquals(newInverseRate, 2.0);
     }


//    @Test
//    public void popularTableTest() throws SQLException {
//        User usr = new User(DBM);
//        outContent.reset();
//
////        DBM.printHistoryOfRates("AUD", "USD");
//
//        usr.getPopularTable();
//
//        assertEquals("+---------+-------+-------+-------+-------+\n"+
//                    "| Code_id |  AUD  |  USD  |  EUR  |  HKD  |\n"+
//                    "+---------+-------+-------+-------+-------+\n"+
//                    "| AUD     | 1     | 0.68  | 0.67  | 5.38  |\n"+
//                    "+---------+-------+-------+-------+-------+\n"+
//                    "| EUR     | 1.48  | 1.02  | 1     | 7.97  |\n"+
//                    "+---------+-------+-------+-------+-------+\n"+
//                    "| HKD     | 0.19  | 0.13  | 0.13  | 1     |\n"+
//                    "+---------+-------+-------+-------+-------+\n"+
//                    "| USD     | 1.46  | 1     | 0.98  | 7.85  |\n"+
//                    "+---------+-------+-------+-------+-------+\n\n"
//                    , outContent.toString());
//
//    }


    @Test 
    public void updatePopularTest(){
        Admin adm = new Admin(DBM);
        ArrayList<String> popularCurrencies;
        popularCurrencies = DBM.getPopularCurrencies();
        
        // checking popular currencies before UPDATE
        assertEquals(popularCurrencies.get(0),"AUD");
        assertEquals(popularCurrencies.get(1),"USD");
        assertEquals(popularCurrencies.get(2),"EUR");
        assertEquals(popularCurrencies.get(3),"HKD");

        //checking after updating popular currencies
        try{
            adm.updateMostPopular("HKD","SGD");
            popularCurrencies = DBM.getPopularCurrencies();
            assertEquals(popularCurrencies.get(0),"AUD");
            assertEquals(popularCurrencies.get(1),"USD");
            assertEquals(popularCurrencies.get(2),"EUR");
            assertEquals(popularCurrencies.get(3),"SGD");

        }catch(SQLException ignored){
            
        }
    }

        
    @Test
    public void historyOfRatesTest(){

        Admin ad = new Admin(DBM);
        ArrayList<Float> history;

        //checking history on initialized history table
        history = DBM.printHistoryOfRates("usd","aud");
        assertEquals(history.get(0),(float)0.68);

        //checking history after updating rate
        ad.updateCurrency("USD", "AUD", "0.50");

        // should be 2 entries now
        history = DBM.printHistoryOfRates("usd","aud");
        assertEquals(history.get(0),(float)0.68);
        assertEquals(history.get(1),(float)0.50);

    }


    @Test
    public void insertHistoryTest(){

        
        assertEquals(DBM.count("Currency","History"),30);

        DBM.insertHistory("AUD","USD","0.50");

        //shows insertHistory adds 2 rows into the History Table (as an inverse rate is also added)
        assertEquals(DBM.count("Currency","History"),32);

    }

    @Test
    public void getPopularTest() throws SQLException {
        outContent.reset();
        User use = new User(DBM);
        use.getPopularTable();
        assertEquals("+------------------------------------------------------+\n" +
                "|   To/From |   AUD   |   USD   |   EUR    |   HKD    |\n" +
                "+------------------------------------------------------+\n" +
                "|   AUD     |  - 1    |  - 1.46  |  - 1.48  |  - 0.19  |\n" +
                "+------------------------------------------------------+\n" +
                "|   USD     |  - 0.68  |  - 1    |  - 1.02  |  - 0.13  |\n" +
                "+------------------------------------------------------+\n" +
                "|   EUR     |  - 0.67  |  - 0.98  |  - 1    |  - 0.13  |\n" +
                "+------------------------------------------------------+\n" +
                "|   HKD     |  - 5.38  |  - 7.85  |  - 7.97  |  - 1    |\n" +
                "+------------------------------------------------------+\n",outContent.toString());
    }

    @Test
    public void historyUpdateTest() throws SQLException {
        DBM.insertHistory("AUD", "USD", "0.27");
        String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
        outContent.reset();
        DBM.printHistoryOfRates("AUD","USD");
        assertEquals("CurrencyFrom  Rate  Currency  TimeStamper\n" +
                "\n" +
                "AUD ,  1.46 ,  USD ,  " + timeStamp + "\n" +
                "AUD ,  0.27 ,  USD ,  " + timeStamp + "\n",outContent.toString());
    }
    @Test
    public void convertTest(){
        User us = new User(DBM);
        outContent.reset();
        us.convert("AUD","USD", (float) 0.27);
        assertEquals("""
        RATE: 1 AUD = 0.680000 USD
        0.270000 AUD = 0.183600 USD
                """,outContent.toString());
    }
    @Test
    public void helpTest(){
        Admin adm = new Admin(DBM);
        outContent.reset();
        adm.getHelp();
        assertEquals("List of Commands:\n" +
                "get - prints a list of all currencies and their rates\n" +
                "convert - begins the conversion from one currency to another\n" +
                "table - prints a table of the most popular 4 currencies and their recent changes\n" +
                "history - returns the history of the exchange rate between 2 currencies\n" +
                "insert - allows admin to insert a new currency \n" +
                "update_popular - allows the admin to update popular currencies.\n" +
                "update_currency - allows the admin to update exchange rate from one currency to another\n" +
                "remove - allows the admin to remove a currency\n" +
                "exit - to exit ADMIN mode\n\n", outContent.toString());

    }

    @Test
    public void historyUpdateTestNull(){
        outContent.reset();
        DBM.insertHistory(null,null,null);
        assertEquals("Could not insert into History.\n", outContent.toString());


    }
    @Test
    public void initializeRatesNewCurrencyTestNull(){
        outContent.reset();
        DBM.initializeRatesNewCurrency(null,null,null);
        assertEquals("Records not created successfully\n", outContent.toString());


    }
    @Test
    public void executeQuery(){
        outContent.reset();
        DBM.executeQuery(null);
        assertEquals("", outContent.toString());


    }
    @Test
    public void removeCurrencyTestNull(){
        outContent.reset();
        DBM.removeCurrency(null);
        assertEquals("", outContent.toString());


    }
    @Test
    public void retrieveRateNull(){
        outContent.reset();
        DBM.retrieveRate(null,null);
        assertEquals("Records not created successfully\n", outContent.toString());


    }
    @Test
    public void initialiselastInsertNull(){
        outContent.reset();
        DBM.lastInsert(null,null);
        assertEquals("Records not created successfully\n", outContent.toString());


    }
    @Test
    public void executeTestNull(){
        outContent.reset();
        DBM.executeUpdate(null);
        assertEquals("", outContent.toString());


    }

    @Test
    public void printHistNullTest(){
        outContent.reset();
        DBM.printHistoryOfRates(null,null);
        assertEquals("", outContent.toString());


    }

    @Test
    public void testApp() {
        App app1 = new App();
        try {
            app1.main(new String[0]);
        }
        catch (Exception e){
            System.out.println("Cannot find under input");
            }
        assertEquals("Currency Table created successfully\n" +
                "Opened database successfully\n" +
                "History Table created successfully\n" +
                "Opened database successfully\n" +
                "Popular Table created successfully\n" +
                "Currency Table created successfully\n" +
                "Records created successfully\n" +
                "Database opened successfully\n" +
                "Currency Table created successfully\n" +
                "Opened database successfully\n" +
                "History Table created successfully\n" +
                "Opened database successfully\n" +
                "Popular Table created successfully\n" +
                "---------------------------\n" +
                "> Are you a user or admin? Cannot find under input\n", outContent.toString());
    }

    // @Test
    // public void historyUpdateTest() throws SQLException {
    //     DBM.insertHistory("AUD", "USD", "0.27");
    //     String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
    //     outContent.reset();
    //     DBM.printHistoryOfRates("AUD","USD");
    //     assertEquals("CurrencyFrom  Rate  Currency  TimeStamper\n" +
    //             "\n" +
    //             "AUD ,  1.46 ,  USD ,  " + timeStamp + "\n" +
    //             "AUD ,  0.27 ,  USD ,  " + timeStamp + "\n",outContent.toString());
    // }
    // @Test
    // public void convertTest(){
    //     User us = new User(DBM);
    //     outContent.reset();
    //     us.convert("AUD","USD", (float) 0.27);
    //     assertEquals("RATE: 1 AUD = 0.680000 USD\n" +
    //             "0.270000 AUD = 0.183600 USD\n",outContent.toString());
    // }
    // @Test
    // public void helpTest(){
    //     Admin adm = new Admin(DBM);
    //     outContent.reset();
    //     adm.getHelp();
    //     assertEquals("List of Commands:\n" +
    //             "get - prints a list of all currencies and their rates\n" +
    //             "convert - begins the conversion from one currency to another\n" +
    //             "table - prints a table of the most popular 4 currencies and their recent changes\n" +
    //             "history - returns the history of the exchange rate between 2 currencies\n" +
    //             "insert - allows admin to insert a new currency \n" +
    //             "update_popular - allows the admin to update popular currencies.\n" +
    //             "update_currency - allows the admin to update exchange rate from one currency to another\n" +
    //             "remove - allows the admin to remove a currency\n" +
    //             "exit - to exit ADMIN mode\n\n", outContent.toString());

    // }

    // @Test
    // public void historyUpdateTestNull(){
    //     outContent.reset();
    //     DBM.insertHistory(null,null,null);
    //     assertEquals("Could not insert into History.\n", outContent.toString());


    // }
    // @Test
    // public void initializeRatesNewCurrencyTestNull(){
    //     outContent.reset();
    //     DBM.initializeRatesNewCurrency(null,null,null);
    //     assertEquals("Records not created successfully\n", outContent.toString());


    // }
    // @Test
    // public void executeQuery(){
    //     outContent.reset();
    //     DBM.executeQuery(null);
    //     assertEquals("", outContent.toString());


    // }
    // @Test
    // public void removeCurrencyTestNull(){
    //     outContent.reset();
    //     DBM.removeCurrency(null);
    //     assertEquals("", outContent.toString());


    // }
    // @Test
    // public void retrieveRateNull(){
    //     outContent.reset();
    //     DBM.retrieveRate(null,null);
    //     assertEquals("Records not created successfully\n", outContent.toString());


    // }
    // @Test
    // public void initialiselastInsertNull(){
    //     outContent.reset();
    //     DBM.lastInsert(null,null);
    //     assertEquals("Records not created successfully\n", outContent.toString());


    // }
    // @Test
    // public void executeTestNull(){
    //     outContent.reset();
    //     DBM.executeUpdate(null);
    //     assertEquals("", outContent.toString());


    // }

    // @Test
    // public void printHistNullTest(){
    //     outContent.reset();
    //     DBM.printHistoryOfRates(null,null);
    //     assertEquals("", outContent.toString());


    // }

    // @Test
    // public void testApp() {
    //     App app1 = new App();
    //     try {
    //         app1.main(new String[0]);
    //     }
    //     catch (Exception e){
    //         System.out.println("Cannot find under input");
    //         }
    //     assertEquals("Currency Table created successfully\n" +
    //             "Opened database successfully\n" +
    //             "History Table created successfully\n" +
    //             "Opened database successfully\n" +
    //             "Popular Table created successfully\n" +
    //             "Currency Table created successfully\n" +
    //             "Records created successfully\n" +
    //             "Database opened successfully\n" +
    //             "Currency Table created successfully\n" +
    //             "Opened database successfully\n" +
    //             "History Table created successfully\n" +
    //             "Opened database successfully\n" +
    //             "Popular Table created successfully\n" +
    //             "---------------------------\n" +
    //             "> Are you a user or admin? Cannot find under input\n", outContent.toString());
    // }


    @Test
    public void popularTableTest() throws SQLException {
        Admin ad = new Admin(DBM);

        ad.updateCurrency("AUD", "USD", "0.60");
        ad.updateCurrency("AUD", "USD", "0.70");
        ad.updateCurrency("AUD", "USD", "0.50");
        User use = new User(DBM);
        use.getPopularTable();


    }

    @Test
    public void printSummaryTest(){
        outContent.reset();
        DBM.printSummary("USD","AUD","2020-06-23","2022-10-10");
        assertEquals("AVG(Rate)  MAX(Rate)  MIN(Rate)\n" +
                "\n" +
                "0.68 ,  0.68 ,  0.68\n",outContent.toString());


    }


}
